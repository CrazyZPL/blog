{"title":"Telegram Todolist Bot(一)","uid":"428eb9665e9283421c6431fc3a5349b9","slug":"Telegram-Todolist-Bot-一","date":"2022-07-10T03:52:32.000Z","updated":"2022-07-10T05:43:40.247Z","comments":true,"path":"api/articles/Telegram-Todolist-Bot-一.json","keywords":null,"cover":null,"content":"<h1 id=\"设计初衷\"><a href=\"#设计初衷\" class=\"headerlink\" title=\"设计初衷\"></a>设计初衷</h1><p>其实在四年前，我就已经开始使用了<code>Telegram</code>作为我的聊天交流工具之一，但是当时懂的还不是很多，所以只是用来和朋友做交流，也没有加一些群组，更不会知道用他们的<code>Telegram Bot API</code>去创建一个Bot去做一些我想让它做的事情。直到今年算是有足够的时间后，我想到了创建一个属于自己的Bot。</p>\n<p>起初我原本是想创建一个群组管理机器人，但是工作量实在是巨大，设计起来相对也会麻烦，所以我只是做了一个雏形，便搁置了。但也正是因为这个群组管理机器人的雏形，我设计了一套<code>telegram-bot-template</code>，底层架构主要依赖的有<a href=\"https://go.dev/\">Golang</a>、<a href=\"https://github.com/go-telegram-bot-api/telegram-bot-api\">go-telegram-bot-api</a>、<a href=\"https://github.com/urfave/cli\">go-cli</a>以及处理Mysql的<a href=\"https://entgo.io/\">ent</a>等。目前这个框架还在进一步完善，后续我也会在补充完成后写一篇Blog讲一下具体的用法。那么今天我想带来的bot，是我正在写的telegram-todo-bot，一个用来管理你的日常代办事项的bot。计划实现的功能如下：</p>\n<ul>\n<li>创建每日的待办事项</li>\n<li>对每日的代办事项做增删改查的操作</li>\n<li>查看每日的待办事项</li>\n<li>根据自己希望的日期查看当天的待办事项</li>\n<li>每日待办事项设置定时提醒</li>\n<li>… …</li>\n</ul>\n<p>原本我觉得这个bot的工程量也不会太大，但是直到我开始上手写了以后，我才发现一些逻辑、底层的东西还是挺多挺复杂的，而且我也在犹豫要不要做一个后台监管记录使用者什么时候做了什么操作、以及一些后台系统的异常报错，但这又会是一个比较大的工作量。所以对于现在的我而言，我还是想先实现一个简单的可以使用的bot，而后在今年年底研究生考试结束以后再做一个比较好的归纳管理。</p>\n<h1 id=\"设计流程\"><a href=\"#设计流程\" class=\"headerlink\" title=\"设计流程\"></a>设计流程</h1><p>由于bot是运行在Telegram中的，所以一些操作还有查看方式其实很大程度上受到了telegram的限制，但是我也尽可能的让其操作看起来很人性化，而不会太过复杂，下面就用我已经实现的几个命令来简单描述一下我的设计理念</p>\n<h2 id=\"Command-create\"><a href=\"#Command-create\" class=\"headerlink\" title=\"Command /create\"></a>Command <code>/create</code></h2><p>顾名思义，<code>create</code>就是用来创建你的今日待办事项集，每一天的待办都是一个待办集，每一个待办集的子项就是用户需要记录的待办或者说待办项。用户在使用<code>create</code>命令的时候同时需要在后方加入自己需要添加的待办项才能成功创建待办集。其实我还想了另一个方法，就是用户发出<code>create</code>命令后，自行跟在后面输入待办，但是这样的话我个人感觉比较麻烦，所以还在构思一些其他更简单方便的方法。创建完毕后，bot会把你创建的内容发送给你，这样就算创建成功了。</p>\n<h2 id=\"Command-today\"><a href=\"#Command-today\" class=\"headerlink\" title=\"Command /today\"></a>Command <code>/today</code></h2><p>用户发出<code>/today</code>命令，机器人会直接返回给你你今天创建的待办集，同时，会把处于完成状态的待办项做明显标识。</p>\n<h2 id=\"Command-update\"><a href=\"#Command-update\" class=\"headerlink\" title=\"Command /update\"></a>Command <code>/update</code></h2><p>用户发出<code>/update</code>命令后，机器人会发送给用户一个命令菜单栏，主要包含四个功能块更新内容、更新状态为完成、删除某条待办项、追加代办项。</p>\n<h3 id=\"更新内容\"><a href=\"#更新内容\" class=\"headerlink\" title=\"更新内容\"></a>更新内容</h3><p>选择更新，机器人会提示用户下一条输入自己想要更新的新待办内容，然后机器人会提示用户更新成功，并返回给用户一个新的更新菜单。</p>\n<h3 id=\"完成待办\"><a href=\"#完成待办\" class=\"headerlink\" title=\"完成待办\"></a>完成待办</h3><p>选择完成，机器人会将选择的那条待办项的状态更新为完成，随后返回给用户更新后的菜单。同时，返回的菜单中，当待办项的状态为已完成时，不会再有完成这一项功能button。</p>\n<h3 id=\"删除待办\"><a href=\"#删除待办\" class=\"headerlink\" title=\"删除待办\"></a>删除待办</h3><p>用户选择删除，即可删除对应的待办项，随后机器人会返回新的菜单给用户。</p>\n<h3 id=\"追加\"><a href=\"#追加\" class=\"headerlink\" title=\"追加\"></a>追加</h3><p>用户选择追加，机器人会提示用户输入需要输入自己想要追加的待办项内容，输入完成后，机器人会返回一条新的菜单给用户。</p>\n<p>目前<code>/update</code>命令只满足于更新今日创建的待办项内容，后续会考虑是否提供更新某个日期的待办项内容。</p>\n<h1 id=\"后续计划\"><a href=\"#后续计划\" class=\"headerlink\" title=\"后续计划\"></a>后续计划</h1><p>后续计划是将上面的<code>/update</code>命令中的追加实现上，而后的计划如下:</p>\n<ol>\n<li>实现用户根据日期查看那个日期创建的待办集</li>\n<li>设置待办指定时间提醒</li>\n<li>用户可以自定义待办模板，方便需要创建新的待办集时直接生成模板待办集</li>\n<li>… …</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>目前的todo bot属于可以使用的正常阶段，其实还有很多可以实现的地方，不过目前也想不到了，后续会根据再跟进补充！等会功能都测试完后我会再附上一些具体的操作图片，这样也会更生动了！那么这篇blog就结束了！</p>\n","feature":true,"text":"设计初衷其实在四年前，我就已经开始使用了Telegram作为我的聊天交流工具之一，但是当时懂的还不是很多，所以只是用来和朋友做交流，也没有加一些群组，更不会知道用他们的Telegram Bot API去创建一个Bot去做一些我想让它做的事情。直到今年算是有足够的时间后，我想到了创...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"telegram","slug":"telegram","count":1,"path":"api/tags/telegram.json"},{"name":"bot","slug":"bot","count":1,"path":"api/tags/bot.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E8%AE%A1%E5%88%9D%E8%A1%B7\"><span class=\"toc-text\">设计初衷</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E8%AE%A1%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">设计流程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Command-create\"><span class=\"toc-text\">Command &#x2F;create</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Command-today\"><span class=\"toc-text\">Command &#x2F;today</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Command-update\"><span class=\"toc-text\">Command &#x2F;update</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9B%B4%E6%96%B0%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">更新内容</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%88%90%E5%BE%85%E5%8A%9E\"><span class=\"toc-text\">完成待办</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E5%BE%85%E5%8A%9E\"><span class=\"toc-text\">删除待办</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%BD%E5%8A%A0\"><span class=\"toc-text\">追加</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%90%8E%E7%BB%AD%E8%AE%A1%E5%88%92\"><span class=\"toc-text\">后续计划</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"CrazyZPL","slug":"blog-author","avatar":"https://img2.doubanio.com/view/photo/l/public/p2776323062.webp","link":"/","description":"Exploring life and finding the truth of technology.","socials":{"github":"https://github.com/CrazyZPL","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"Rebuild my hexo blog","uid":"aedd3eceb61647beed03f84417c79092","slug":"Build-My-Blog","date":"2022-07-08T08:05:23.000Z","updated":"2022-07-08T09:40:17.616Z","comments":true,"path":"api/articles/Build-My-Blog.json","keywords":null,"cover":"https://images.pexels.com/photos/12310381/pexels-photo-12310381.jpeg","text":"又又又一次重新在服务器上搭建Hexo Blog之旅记得上一次建hexo还是在上次，上上次建hexo还是在上上次。第一次建hexo的时候是在我的windows系统本地搭建的，当时就是觉得很不方便，如果说我没有再用这台电脑了呢？迁移就不是很方便，所以那一次的搭建结束后，很快我就终止使...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"Study","slug":"Study","count":1,"path":"api/categories/Study.json"}],"tags":[{"name":"blog","slug":"blog","count":1,"path":"api/tags/blog.json"},{"name":"hexo","slug":"hexo","count":1,"path":"api/tags/hexo.json"}],"author":{"name":"CrazyZPL","slug":"blog-author","avatar":"https://img2.doubanio.com/view/photo/l/public/p2776323062.webp","link":"/","description":"Exploring life and finding the truth of technology.","socials":{"github":"https://github.com/CrazyZPL","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}