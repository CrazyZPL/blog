[{"id":"428eb9665e9283421c6431fc3a5349b9","title":"Telegram Todolist Bot(一)","content":"设计初衷其实在四年前，我就已经开始使用了Telegram作为我的聊天交流工具之一，但是当时懂的还不是很多，所以只是用来和朋友做交流，也没有加一些群组，更不会知道用他们的Telegram Bot API去创建一个Bot去做一些我想让它做的事情。直到今年算是有足够的时间后，我想到了创建一个属于自己的Bot。\n起初我原本是想创建一个群组管理机器人，但是工作量实在是巨大，设计起来相对也会麻烦，所以我只是做了一个雏形，便搁置了。但也正是因为这个群组管理机器人的雏形，我设计了一套telegram-bot-template，底层架构主要依赖的有Golang、go-telegram-bot-api、go-cli以及处理Mysql的ent等。目前这个框架还在进一步完善，后续我也会在补充完成后写一篇Blog讲一下具体的用法。那么今天我想带来的bot，是我正在写的telegram-todo-bot，一个用来管理你的日常代办事项的bot。计划实现的功能如下：\n\n创建每日的待办事项\n对每日的代办事项做增删改查的操作\n查看每日的待办事项\n根据自己希望的日期查看当天的待办事项\n每日待办事项设置定时提醒\n… …\n\n原本我觉得这个bot的工程量也不会太大，但是直到我开始上手写了以后，我才发现一些逻辑、底层的东西还是挺多挺复杂的，而且我也在犹豫要不要做一个后台监管记录使用者什么时候做了什么操作、以及一些后台系统的异常报错，但这又会是一个比较大的工作量。所以对于现在的我而言，我还是想先实现一个简单的可以使用的bot，而后在今年年底研究生考试结束以后再做一个比较好的归纳管理。\n设计流程由于bot是运行在Telegram中的，所以一些操作还有查看方式其实很大程度上受到了telegram的限制，但是我也尽可能的让其操作看起来很人性化，而不会太过复杂，下面就用我已经实现的几个命令来简单描述一下我的设计理念\nCommand /create顾名思义，create就是用来创建你的今日待办事项集，每一天的待办都是一个待办集，每一个待办集的子项就是用户需要记录的待办或者说待办项。用户在使用create命令的时候同时需要在后方加入自己需要添加的待办项才能成功创建待办集。其实我还想了另一个方法，就是用户发出create命令后，自行跟在后面输入待办，但是这样的话我个人感觉比较麻烦，所以还在构思一些其他更简单方便的方法。创建完毕后，bot会把你创建的内容发送给你，这样就算创建成功了。\nCommand /today用户发出/today命令，机器人会直接返回给你你今天创建的待办集，同时，会把处于完成状态的待办项做明显标识。\nCommand /update用户发出/update命令后，机器人会发送给用户一个命令菜单栏，主要包含四个功能块更新内容、更新状态为完成、删除某条待办项、追加代办项。\n更新内容选择更新，机器人会提示用户下一条输入自己想要更新的新待办内容，然后机器人会提示用户更新成功，并返回给用户一个新的更新菜单。\n完成待办选择完成，机器人会将选择的那条待办项的状态更新为完成，随后返回给用户更新后的菜单。同时，返回的菜单中，当待办项的状态为已完成时，不会再有完成这一项功能button。\n删除待办用户选择删除，即可删除对应的待办项，随后机器人会返回新的菜单给用户。\n追加用户选择追加，机器人会提示用户输入需要输入自己想要追加的待办项内容，输入完成后，机器人会返回一条新的菜单给用户。\n目前/update命令只满足于更新今日创建的待办项内容，后续会考虑是否提供更新某个日期的待办项内容。\n后续计划后续计划是将上面的/update命令中的追加实现上，而后的计划如下:\n\n实现用户根据日期查看那个日期创建的待办集\n设置待办指定时间提醒\n用户可以自定义待办模板，方便需要创建新的待办集时直接生成模板待办集\n… …\n\n总结目前的todo bot属于可以使用的正常阶段，其实还有很多可以实现的地方，不过目前也想不到了，后续会根据再跟进补充！等会功能都测试完后我会再附上一些具体的操作图片，这样也会更生动了！那么这篇blog就结束了！\n","slug":"Telegram-Todolist-Bot-一","date":"2022-07-10T03:52:32.000Z","categories_index":"","tags_index":"telegram,bot","author_index":"CrazyZPL"},{"id":"aedd3eceb61647beed03f84417c79092","title":"Rebuild my hexo blog","content":"又又又一次重新在服务器上搭建Hexo Blog之旅记得上一次建hexo还是在上次，上上次建hexo还是在上上次。第一次建hexo的时候是在我的windows系统本地搭建的，当时就是觉得很不方便，如果说我没有再用这台电脑了呢？迁移就不是很方便，所以那一次的搭建结束后，很快我就终止使用了那个版本的blog。\n第二次建hexo博客是在今年年初，当时闲着无聊，而且正好想着我的一个国内服务器加域名快要到期了，怎么说也要好好白嫖到底，于是就自己琢磨着在服务器上搭了个hexo，同时通过nginx将我的域名设置到我的hexo博客，当时觉得用着还行，结果后续还是因为自己太懒了，于是进度就又荒废了。。。这点确实想吐槽死自己。\n第三次，也就是这次，博客会做成什么样呢？先让我总结一下这次的搭建过程吧！\n准备工作本次搭建博客，我的框架选择还是Hexo，http服务器选择Nginx，主题这次选择的是Aurora，个人觉得是一个非常不错的hexo主题，想要了解的可以去官网查看详细信息。\n服务器我选择的是Vultr的VPS，毕竟这样可以省去备案的功夫和时间，同时也更方便我学习其他更多的技能；域名是选择在Namesilo上购买的域名，毕竟相对于海外的其他几家来说它的.com域名更加便宜，但是需要吐槽的是域名控制面板看起来好老旧啊！\n本次搭建还需要的工具有，Git、NodeJS，Certbot等。啊对了，当然还有Github。那么接下来就让我们开始搭建属于自己的hexo博客吧！\n\n\n\n\n\n\n注意！\n由于这次我选择的服务器系统为Ubuntu20.0.4，所以接下来所有的操作都是默认在Ubuntu系统上的，其它系统应该也都是大同小异，不懂得地方一定要多Google呦！\n\n安装Git一般服务器初始默认都会包含有git，如果git version提示没有结果，请使用如下命令下载安装git，实在不懂可以去看官网的下载教程！\nsudo apt update\nsudo apt install git\ngit version\n\n安装NodeJSNodeJS的安装方法其实网络上也都可以搜到，这里我就简单介绍一下我的下载方式\ncurl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -\nsudo apt install nodejs\nnode -v\nnpm -v\n\n安装Hexonpm install -g hexo-cli\nhexo init &lt;your-blog-folder-name>\ncd &lt;your-blog-folder-name>\nnpm install\n上述命令执行完毕后，你可以执行hexo s命令本地运行hexo，访问http://your_ip_address:4000即可预览你的blog！\n\n\n\n\n\n\nTip\n如果你发现访问不了，请检查一下你的服务器防火墙是否有释放4000端口，检测方式如下\nsudo ufw status | grep 4000\nsudo ufw allow 4000\nsudo ufw status | grep 4000\n\n\n接下来我们要做的是配置一下hexo的配置文件，当然这里主要讲的是deploy的配置，其他配置请自行到Hexo官网查看修改！首先，vim打开根目录下的_config.yml文件，然后翻到最底部的deploy部分，将内容改成如下形式：\ndeploy:\n\ttype: git\n\trepo: https:&#x2F;&#x2F;github.com&#x2F;&lt;username&gt;&#x2F;&lt;project&gt;\n\tbranch: master\n\n\n\n\n\n\n\n\nTip\n\n首先，我们需要在自己github上创建一个仓库，这里详细步骤就不再赘述了，但是请注意，你的仓库名称一定要定义为&lt;github_username&gt;.github.io形式，具体为什么自己查阅！\n其次，我们需要在服务器上安装一个部署插件**npm install hexo-deployer-git --save**\n\n\n\n完成上述所有操作后，运行hexo clean &amp;&amp; hexo g &amp;&amp; hexo d，查看你的github仓库中此时是否已经有了内容，接着在浏览器地址栏输入&lt;github_username&gt;.github.io来查看是否已经部署成功即可！如果没有陈工可以选择如下操作：\n\n重装\n自行Google解决！\n\n到这里关于hexo的安装就已经结束了，后续更多操作，就麻烦自行去官网查看或者自行Google了！\n安装Aurora主题这里安装步骤其实官网都有，这里我就不过多赘述了，主要是要讲几点问题：\n\n安装完成后记得到_config.yml文件中把theme栏的主题名称改成aurora；\n如果说你在执行Hexo命令时遇到了一些scripts报错，直接重装主题即可，我这边卸载重装一次后就没有再报错且网站也显示正常了；\n记得也有修改_config.aurora.yml文件中的一些基础信息呦！\n\n通过Nginx代理域名转发Nginx的下载这里就不过多赘述了，主要讲一下配置文件的具体格式，格式如下：\nserver &#123;\n\tserver_name &lt;你的域名或者你的服务器ip或者localhost&gt;;\n\tlocation &#x2F; &#123;\n\t\troot &lt;你的hexo-blog文件地址&gt;&#x2F;public;\n\t\tindex index.html index.htm;\n\t&#125;\n&#125;\n\n目前为止配置加进去这个即可，记得加到http块中，然后你可以尝试在浏览器中输入你的域名访问看能否访问到，哦对了，访问之前，记得重启你的nginx服务器，操作如下：\nnginx -t\nnginx -s reload\n\n如果你发现访问成功了，接下来就可以为你的域名申请证书了，这里我使用的是Certbot，接下来讲一下如何操作——其实官网里也都有说\nsudo apt update\nsudo apt install snapd\nsudo snap install core; sudo snap refresh core\nsudo apt remove certbot\nsudo snap install --classic certbot\nsudo ln -s /snap/bin/certbot /usr/bin/certbot\nsudo certbot --nginx\n\n执行完上述最后一条命令，根据提示输入信息，随后再查看你的nginx配置文件，你就会发现多了一些证书信息，这个时候在你的域名前加上https并再次访问，查看是否访问成功！\n还有一点是，申请的证书有效期是三个月，所以在到期之前，你需要给你的证书更新一下，具体怎么做可以自行解决！我太懒了，就不在这里多说了！\n总结这一次其实还是踩了不少坑的，比如通过github pages想代理我的域名的时候，怎么解析都检测不到正确的dns，再比如现在好多教程都是教你在服务器上搭git仓库然后进行各种操作，我是不太懂啊，只是觉得怎么方便怎么来！希望这次能够坚持下去，学习！努力！赚钱！也当作记录美好生活吧。那么这篇blog就到这里结束了！\n","slug":"Build-My-Blog","date":"2022-07-08T08:05:23.000Z","categories_index":"Study","tags_index":"blog,hexo","author_index":"CrazyZPL"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new \"My New Post\"\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2022-07-07T07:55:18.743Z","categories_index":"","tags_index":"","author_index":"CrazyZPL"}]